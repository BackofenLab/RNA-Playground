/*
University of Freiburg WS 2017/2018
Chair for Bioinformatics
Supervisor: Martin Raden
Author: Alexander Mattheis
*/

/*-------------------------*/
/*----STYLE CONVENTIONS----*/
/*-------------------------*/

/*---- comments ----*/
In comments use this " (symbol) and not this ' (symbol) to emphasize something.

/*---- constants ----*/
Nearly all constants are stored in the "defaults.js".
Namespaces, HTML class-names and events like "mouse-over" etc. are not stored in the "defaults.js"
because else it would slow down the development process.
If you have multiple constants of same "logic" (for example with similar naming)
then you store them in a structure.

/*---- order in constructor elements ----*/
1.  variables:
    this.inputUpdatesStarted = false;

2.  bindings:
    ko.bindingHandlers.drawChar = {
        ...
    };

3.  public methods (linking):
    this.activateInputUpdates = activateInputUpdates;
    this.inputUpdatesActivated = inputUpdatesActivated;
    this.linkElements = linkElements;
    this.updateGUI = updateGUI;

/*---- order of program elements ----*/
1.  namespace with its public methods:
    namespace("needlemanWunsch", startNeedlemanWunsch, NeedlemanWunsch, setInput, compute, getOutput);

2.  class instances:
    var needlemanWunschInstance;

3.  shared variables
    var inputData = {};
    var outputData = {};

4.  start-function:
    startNeedlemanWunsch() {...}

5.  imports:
    imports()

6.1 Input constructor (with its used methods below):
    function InputViewmodel() {...}

    HINT:   Methods are defined directly below in the order
            in which they are called in the parent method.
            With this design you can read a class like a book or an article
            (speeds up workflow).

            Example:
            function parent() {
                child1();
                child2();
            }

            function child1() {
                someMethod();
                ...
            }

            function someMethod() {
                ...
            }

            function child2() {
                ...
            }

6.2 Algorithm constructor (with its methods):
    NeedlemanWunsch() {...}

6.3 Output constructor (with its methods):
    function OutputViewmodel(outputData) {...}

/*---- namespaces ----*/
Functions declared as public in the namespace,
should have the same order in the code.

Example:
namespace("procedures.bases.alignment",
        Alignment, getInput, setInput, compute, recursionFunction, createAlignments, getOutput, setIO);

        function Alignment() {
            ...
        }

        function getInput() {
            ...
        }

        ...

        function setIO() {
            ...
        }

/*---- paths ----*/
Paths are constant and so they are stored in the "defaults.js".

/*---- shared variables ----*/
Variables which are stored outside a constructor.

/*---- variables ----*/
Variables have to be always stored inside the constructor
to avoid variable conflicts with other classes in the same namespace.
An exception are "shared variables" which are used between the "classes".

/*------------------------------------------------------KEYWORDS------------------------------------------------------*/
 /*---- "this"-keyword ----*/
The "this"-keyword is not used in this project to reference the method-object,
instead an instance on the object is created in the constructor.
The idea behind this? In Javascript "this" points on the
invoker-object which has called the method. So, with the strict-mode it is undefined
in methods which are called by other methods.
This can lead to bugs and so the "this"-keyword
is only used in constructors of this project and for invokers which are not the class-object.

/*--- "use strict"; ----*/
To write good Javascript-code the strict-mode has to be used.
The strict-command has to be written
into the first line of every Javascript-file.