/*
University of Freiburg WS 2017/2018
Chair for Bioinformatics
Supervisor: Martin Raden
Author: Alexander Mattheis
*/

/*-------------------------*/
/*---------READ ME---------*/
/*-------------------------*/

/*-----------------------------------------------------DEVELOPMENT----------------------------------------------------*/
The DNA-bionformatics part of
the project was developed by Alexander Mattheis (supervised by Martin Raden)
with the cross-platform IDE "PhpStorm 2017.2.4".

/*----------------------------------------------EXTENDING VISUALIZATION-----------------------------------------------*/
All functions which are used for visualization like highlighting, drawing arrows
and functions which are used to create downloadable files are stored in "js/post_processing/visualizer.js".
This class is working closely together with the "js/post_processing/input_processor.js" class
which is handling the input.

Hint:
Algorithm names have to be eventually added
into the lists of algorithms (SVG_ARROW_ALGORITHMS, MULTI_TABLE_ALGORITHMS, ...) in the "default.js"
to activate automatically an algorithm visualization
(look at HTML-elements class-names for example in NW to get a visualization).

/*------------------------------------IMPLEMENTING NEW ALGORITHM FOR VISUALIZATION------------------------------------*/
-   create a new page "ExampleAlgorithm.html" in "/"
    (use hyphens for the page name or PascalCase https://en.wikipedia.org/wiki/PascalCase)
-   create a new script "example_algorithm.js" in "js/"
    (use underscores for the script name and lowercase letters)
-   go into "index.html" and enter your algorithm name (without underscores) in the algorithm menu area:

    <div id="algorithm_menu">
        <ul>
            <li><a href="#">Example-Algorithm</a></li>
        </ul>
    </div>

    or

    <div id="algorithm_menu">
        <ul>
            <li><a href="#">ExampleAlgorithm</a></li>
        </ul>
    </div>

/*-----------------------------------------------------INHERITANCE----------------------------------------------------*/
In this project simulated inheritance is used because ECMAScript 5
does not support real, Java-like inheritance like in ECMAScript 6 (from 2015).
But ECMAScript 5 is also fully supported by older browsers and tablet/smartphone browsers.

Examples for simulated inheritance you find under "js/procedures/bases/":
from the classes there, other classes like Needleman-Wunsch inherit functions
by exchanging instances.
So, the parent class is executing the child-class by an instance
and the child class can exchange information with the parent class
through an instance of the parent class (with the related functions: getInput, getOutput, setIO).

/*--------------------------------------------------INPUT PROCESSING--------------------------------------------------*/
The "InputProcessor"-class under "js/post_processing/input_processor.js"
is used for forwarding input to the algorithms and output to the visualizer.
It removes wrong inputs before data is passed to a algorithm
and it defines the behaviour of different input types.

Example:    Result selection
-   after a click on a result,
    the input processor is selecting a table entry of the results table (id: "results")
-   the table and the entry is then sent from this class to the visualizer
    which highlights the entry

/*-----------------------------------------------------INTERFACES-----------------------------------------------------*/
Interfaces under "js/interfaces/" are used to work with the input and output (the interface) of the algorithm.
Such interfaces are bind to specific algorithms.
The "InputProcessor" is executing interfaces to get an algorithm output.

/*--------------------------------------------------------HINTS-------------------------------------------------------*/
# HINT 1
Some tables maybe consist out of three separate tables
(instead of one table with header and footer),
because of a Firefox-Bug (bottom right edge disappears).

see: https://github.com/PerfectionMaschine/RNA-Playground/issues/1
<<  Das war wohl ein Firefox-Bug.
    In der Developer-Version (also, vermutlich auch in der nÃ¤chsten Firefox-Version)
    tritt er nicht auf und auch in keinem anderen Browser.
    Habe jetzt die Tabellen umgeschrieben und den Footer
    von der eigentlichen Tabelle separiert. Jetzt tritt das Problem nimmer auf. >>

translated:
<<  That was probably a Firefox bug.
    In the Developer version (so, probably in the next Firefox version),
    it does not appear and also in no other browser.
    I have now rewritten the tables and separated the footer
    from the actual table. Now the problem never occurs. >>

/*------------------------------------------------------LOADING-------------------------------------------------------*/
The loading of an algorithm-page into a webpage is done in the "loader.js"-file.
In this file is a function "updateDocumentView(algorithm, view)" which loads the page into a "div".
If you want add a new algorithm you have to extend this file
and add the Javascript algorithm name into the structure ALGORITHMS in the file "defaults.js".

Hint: Do also a look into EXTENDING VISUALIZATION!

/*-------------------------------------------------------PATHS--------------------------------------------------------*/
Many Javascript-paths are stored under "js/defaults.js".

Hint:	If you want change file-paths, then you have also to change paths in the "alignment.html" or your webpage.

/*-------------------------------------------------------TESTS--------------------------------------------------------*/
Unit-Tests are stored under "js/tests/". The file "UnitTests.jstd" is specifying Unit-Test file paths.
The tool/plugin which was used to create the Unit-Tests is "JsTestDriver".
